# Task 1
class Solution(object):
    def findJudge(self, n, trust):
        """
        :type n: int
        :type trust: List[List[int]]
        :rtype: int
        """
        if n == 1 and not trust:
            return 1

        trusts_count = [0] * (n+1)
        trusts = [0] * (n+1)
        for x, y in trust:
            trusts_count[x] += 1
            trusts[y] += 1
        for person in range(1, n+1):
            if trusts_count[person] == 0 and trusts[person] == (n-1):
                return person

        return -1

# The method using a hashmap is straightforward and efficient in terms of time, and it doesn't involve using any additional structures
# but a graph representation would be better for more complex problems (with  better understanding of connections and divisions), but it is harder to code.
# Also, with the graph representation we could use BFS/DFS to explore it.

# Task 2
class SocialNetwork:
    def __init__(self, graph, weights=None):
        self.graph = graph
        self.weights = weights or {user: {friend: 1 for friend in friends} for user, friends in graph.items()}

    def recommend_friends(self, user):
        direct = self.graph.get(user, set())
        potential = {}
        for friend in direct:
            for mutual in self.graph.get(friend, set()):
                if mutual != user and mutual not in direct:
                    if mutual not in potential:
                        potential[mutual] = {'mutual_count': 0, 'total_strength': 0}
                    potential[mutual]['mutual_count'] += 1
                    potential[mutual]['total_strength'] += (
                        self.weights[friend].get(mutual, 1) + self.weights[user].get(friend, 1)
                    )

        recommendations = sorted(
            potential.items(),
            key=lambda x: (-x[1]['mutual_count'], -x[1]['total_strength'])
        )
        return recommendations


def recommend_friends(graph, user):
    if user not in graph:
        return []

    direct = graph[user]
    potential = {}

    for friend in direct:
        for friend_of_friend in graph[friend]:
            if friend_of_friend != user and friend_of_friend not in direct:
                if friend_of_friend not in potential:
                    potential[friend_of_friend] = 0
                potential[friend_of_friend] += 1

    recommendations = sorted(
        potential.items(), key=lambda x: (-x[1], x[0])
    )
    return recommendations

def format_recommendations(user, recommendations):
    """
    Format the recommendations to match the expected output format.
    """
    output = f"Recommendations for {user}:\n"
    for potential, mutual_count in recommendations:
        output += f"'{potential}': {mutual_count} mutual friend{'s' if mutual_count > 1 else ''}\n"
    return output.strip()

def lists_are_equal_unordered(list1, list2):
    """
    Check if two lists of tuples are equal, ignoring the order of elements with the same count.
    """
    return sorted(list1, key=lambda x: (-x[1], x[0])) == sorted(list2, key=lambda x: (-x[1], x[0]))

def test_recommendation_system():
    """
    Run tests for the recommendation system with formatted output verification.
    """
    # Test 1: Simple graph
    graph1 = {
        'A': {'B', 'C', 'D'},
        'B': {'A', 'C', 'E'},
        'C': {'A', 'B', 'F'},
        'D': {'A'},
        'E': {'B'},
        'F': {'C'}
    }
    user = 'A'
    recommendations = recommend_friends(graph1, user)
    formatted_result = format_recommendations(user, recommendations)

    expected_output = [
        ('E', 1),
        ('F', 1)
    ]

    assert lists_are_equal_unordered(recommendations, expected_output), (
        f"Test 1 failed. Expected:\n{expected_output}\nGot:\n{recommendations}"
    )

    # Test 2: Larger graph
    graph2 = {
        '1': {'2', '3'},
        '2': {'1', '4', '5'},
        '3': {'1', '5', '6'},
        '4': {'2'},
        '5': {'2', '3'},
        '6': {'3'}
    }
    user = '1'
    recommendations = recommend_friends(graph2, user)
    formatted_result = format_recommendations(user, recommendations)

    expected_output = [
        ('5', 2),
        ('4', 1),
        ('6', 1)
    ]

    assert lists_are_equal_unordered(recommendations, expected_output), (
        f"Test 2 failed. Expected:\n{expected_output}\nGot:\n{recommendations}"
    )

    # Test 3: Edge case - No potential friends
    graph3 = {
        'X': {'Y'},
        'Y': {'X'}
    }
    user = 'X'
    recommendations = recommend_friends(graph3, user)
    formatted_result = format_recommendations(user, recommendations)

    expected_output = []
    assert recommendations == expected_output, (
        f"Test 3 failed. Expected:\n{expected_output}\nGot:\n{recommendations}"
    )

    # Test 4: Self-loop (ignored)
    graph4 = {
        'U': {'U', 'V'},
        'V': {'U', 'W'},
        'W': {'V'}
    }
    user = 'U'
    recommendations = recommend_friends(graph4, user)
    formatted_result = format_recommendations(user, recommendations)

    expected_output = [
        ('W', 1)
    ]
    assert recommendations == expected_output, (
        f"Test 4 failed. Expected:\n{expected_output}\nGot:\n{recommendations}"
    )

    # Test 5: Weighted graph (weights ignored for simplicity)
    graph5 = {
        'A': {'B', 'C', 'D'},
        'B': {'A', 'C', 'E'},
        'C': {'A', 'B', 'F'},
        'D': {'A'},
        'E': {'B'},
        'F': {'C'}
    }
    user = 'A'
    recommendations = recommend_friends(graph5, user)
    formatted_result = format_recommendations(user, recommendations)

    expected_output = [
        ('E', 1),
        ('F', 1)
    ]

    assert lists_are_equal_unordered(recommendations, expected_output), (
        f"Test 5 failed. Expected:\n{expected_output}\nGot:\n{recommendations}"
    )

    print("All tests passed successfully!")

if __name__ == "__main__":
    test_recommendation_system()





# Task 3
import math

INF = math.inf

def foo(n, roads):
    distance = [[INF] * n for i in range(n)]
    next_hop = [[None] * n for i in range(n)]

    for i in range(n):
        distance[i][i] = 0

    for a, b, weight in roads:
        distance[a][b] = weight
        distance[b][a] = weight
        next_hop[a][b] = b
        next_hop[b][a] = a

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if distance[i][k] + distance[k][j] < distance[i][j]:
                    distance[i][j] = distance[i][k] + distance[k][j]
                    next_hop[i][j] = next_hop[i][k]
    return distance, next_hop

def reconstruct_path(next_hop, start, end):
    if next_hop[start][end] is None:
        return None
    path = [start]
    while start != end:
        start = next_hop[start][end]
        path.append(start)
    return path

def test_transportation_network():
    """
    Test cases for the transportation network optimization.
    """
    # Test 1: Example case
    n = 5
    roads = [
        (0, 1, 4),
        (0, 2, 6),
        (0, 3, 7),
        (0, 4, 10),
        (1, 2, 2),
        (1, 3, 3),
        (1, 4, 6),
        (2, 3, 1),
        (2, 4, 4),
        (3, 4, 3)
    ]
    dist, next_hop = foo(n, roads)

    expected_matrix = [
        [0, 4, 6, 7, 10],
        [4, 0, 2, 3, 6],
        [6, 2, 0, 1, 4],
        [7, 3, 1, 0, 3],
        [10, 6, 4, 3, 0]
    ]

    assert dist == expected_matrix, f"Test 1 failed. Got:\n{dist}"

    # Test 2: Disconnected cities
    n = 3
    roads = [(0, 1, 5)]
    dist, next_hop = foo(n, roads)

    expected_matrix = [
        [0, 5, INF],
        [5, 0, INF],
        [INF, INF, 0]
    ]

    assert dist == expected_matrix, f"Test 2 failed. Got:\n{dist}"

    # Test 3: Single city
    n = 1
    roads = []
    dist, next_hop = foo(n, roads)

    expected_matrix = [[0]]
    assert dist == expected_matrix, f"Test 3 failed. Got:\n{dist}"

    # Test 4: Dynamic update - Adding a road
    n = 4
    roads = [
        (0, 1, 3),
        (1, 2, 1)
    ]
    dist, next_hop = foo(n, roads)

    # Add a new road dynamically
    roads.append((2, 3, 2))
    dist, next_hop = foo(n, roads)

    expected_matrix = [
        [0, 3, 4, 6],
        [3, 0, 1, 3],
        [4, 1, 0, 2],
        [6, 3, 2, 0]
    ]

    assert dist == expected_matrix, f"Test 4 failed. Got:\n{dist}"

    # Test 5: Dynamic update - Removing a road
    roads.remove((1, 2, 1))
    dist, next_hop = foo(n, roads)

    expected_matrix = [
        [0, 3, INF, INF],
        [3, 0, INF, INF],
        [INF, INF, 0, 2],
        [INF, INF, 2, 0]
    ]

    assert dist == expected_matrix, f"Test 5 failed. Got:\n{dist}"

    print("All tests passed successfully!")

if __name__ == "__main__":
    test_transportation_network()



# Task 4
def has_cycle(n, edges):
    graph = {i: [] for i in range(n)}
    for u, v in edges:
        graph[u].append(v)

    visited = [False] * n
    recursion_stack = [False] * n

    def dfs(node):
        if not visited[node]:
            visited[node] = True
            recursion_stack[node] = True
            for neighbor in graph[node]:
                if not visited[neighbor] and dfs(neighbor):
                    return True
                elif recursion_stack[neighbor]:
                    return True
        recursion_stack[node] = False
        return False

    for i in range(n):
        if not visited[i]:
            if dfs(i):
                return True
    return False


def test_supply_cycle_detection():
    """
    Test cases for cycle detection in a supply network.
    """
    # Test 1: Example with a cycle
    n = 4
    edges = [(0, 1), (1, 2), (2, 0), (2, 3)]
    result = has_cycle(n, edges)
    assert result == True, f"Test 1 failed. Expected: True, Got: {result}"

    print("Example Input:")
    print("Cycle Detection: Yes")
    print()

    # Test 2: No cycle
    n = 4
    edges = [(0, 1), (1, 2), (2, 3)]
    result = has_cycle(n, edges)
    assert result == False, f"Test 2 failed. Expected: False, Got: {result}"

    print("Cycle Detection: No")
    print()

    # Test 3: Single node, no cycle
    n = 1
    edges = []
    result = has_cycle(n, edges)
    assert result == False, f"Test 3 failed. Expected: False, Got: {result}"

    # Test 4: Self-loop (cycle)
    n = 3
    edges = [(0, 0), (1, 2)]
    result = has_cycle(n, edges)
    assert result == True, f"Test 4 failed. Expected: True, Got: {result}"

    print("Cycle Detection: Yes (Self-loop)")
    print()

    # Test 5: Multiple disconnected components with one cycle
    n = 5
    edges = [(0, 1), (1, 2), (2, 0), (3, 4)]
    result = has_cycle(n, edges)
    assert result == True, f"Test 5 failed. Expected: True, Got: {result}"

    print("Cycle Detection: Yes (Disconnected components)")
    print()

    print("All tests passed successfully!")

if __name__ == "__main__":
    test_supply_cycle_detection()


# Task 5
def create_graph(n, edges):
    graph = {i: [] for i in range(1, n + 1)}
    for a, b in edges:
        graph[a].append(b)
        graph[b].append(a)
    return graph

def greedy_coloring(n, edges):
    graph = create_graph(n, edges)
    colors = [-1] * (n + 1)

    for node in range(1, n + 1):
        neighbor_colors = set()
        for neighbor in graph[node]:
            if colors[neighbor] != -1:
                neighbor_colors.add(colors[neighbor])
        color = 1
        while color in neighbor_colors:
            color += 1
        colors[node] = color

    return colors[1:], max(colors)


def test_social_group_coloring():
    """
    Test cases for social group coloring.
    """
    # Test 1: Example graph
    n = 4
    edges = [(1, 2), (2, 3), (3, 4), (4, 1)]
    color_assignment, total_colors = greedy_coloring(n, edges)

    print("Test 1 - Example Graph")
    print("Color Assignment:", color_assignment)
    print("Total Colors Used:", total_colors)
    assert total_colors == 2, f"Test 1 failed. Expected 2 colors, got {total_colors}."

    # Test 2: No edges (independent nodes)
    n = 3
    edges = []
    color_assignment, total_colors = greedy_coloring(n, edges)

    print("Test 2 - No Edges")
    print("Color Assignment:", color_assignment)
    print("Total Colors Used:", total_colors)
    assert total_colors == 1, f"Test 2 failed. Expected 1 color, got {total_colors}."

    # Test 3: Complete graph
    n = 4
    edges = [(1, 2), (1, 3), (1, 4), (2, 3), (2, 4), (3, 4)]
    color_assignment, total_colors = greedy_coloring(n, edges)

    print("Test 3 - Complete Graph")
    print("Color Assignment:", color_assignment)
    print("Total Colors Used:", total_colors)
    assert total_colors == 4, f"Test 3 failed. Expected 4 colors, got {total_colors}."

    # Test 4: Bipartite graph
    n = 6
    edges = [(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]
    color_assignment, total_colors = greedy_coloring(n, edges)

    print("Test 4 - Bipartite Graph")
    print("Color Assignment:", color_assignment)
    print("Total Colors Used:", total_colors)
    assert total_colors == 2, f"Test 4 failed. Expected 2 colors, got {total_colors}."

    # Test 5: Disconnected graph
    n = 5
    edges = [(1, 2), (2, 3), (4, 5)]
    color_assignment, total_colors = greedy_coloring(n, edges)

    print("Test 5 - Disconnected Graph")
    print("Color Assignment:", color_assignment)
    print("Total Colors Used:", total_colors)
    assert total_colors == 2, f"Test 5 failed. Expected 2 colors, got {total_colors}."

    print("All tests passed successfully!")


if __name__ == "__main__":
    test_social_group_coloring()


# Task 6
class Solution(object):
    def canFinish(self, numCourses, prerequisites):
        """
        :type numCourses: int
        :type prerequisites: List[List[int]]
        :rtype: bool
        """
        graph = {i: [] for i in range(numCourses)}
        for course, prq in prerequisites:
            graph[course].append(prq)

        visited = [0] * numCourses

        def dfs(course):
            if visited[course] == 1:
                return False
            if visited[course] == 2:
                return True

            visited[course] = 1

            for prq in graph[course]:
                if not dfs(prq):
                    return False

            visited[course] = 2
            return True

        for course in range(numCourses):
            if visited[course] == 0:
                if not dfs(course):
                    return False

        return True

# Task 7
class UnionFind:
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, a):
        if self.parent[a] != a:
            self.parent[a] = self.find(self.parent[a])
        return self.parent[a]

    def union(self, a, b):
        root_a = self.find(a)
        root_b = self.find(b)

        if root_a != root_b:
            if self.rank[root_a] > self.rank[root_b]:
                self.parent[root_b] = root_a

            elif self.rank[root_a] < self.rank[root_b]:
                self.parent[root_a] = root_b

            else:
                self.parent[root_b] = root_a
                self.rank[root_a] += 1


def kruskal(n, edges):
    edges.sort(key=lambda edge: edge[2])
    uf = UnionFind(n)
    mst = []
    total_cost = 0

    for city1, city2, cost in edges:
        if uf.find(city1 - 1) != uf.find(city2 - 1):
            uf.union(city1 - 1, city2 - 1)
            mst.append((city1, city2, cost))
            total_cost += cost

    return mst, total_cost

n = 5
edges = [
    (1, 3, 3),
    (2, 3, 2),
    (4, 5, 4),
    (3, 4, 5)
]

mst, total_cost = kruskal(n, edges)

print("Optimal roads (minimum spanning tree):")
for road in mst:
    print(f"Road between city{road[0]} and city{road[1]} with a cost of {road[2]}")
print(f"Total cost of optimized network: {total_cost}")


